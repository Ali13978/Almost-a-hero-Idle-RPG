using System;
using Static;

namespace Simulation
{
	public class MythicalArtifactFreeExploiter : MythicalArtifactEffect
	{
		public override void Apply(UniversalTotalBonus totBonus)
		{
			if (this.forcedDisable)
			{
				return;
			}
			totBonus.freeUpgradeChance += this.chance;
		}

		public override int GetMinRequiredMythical()
		{
			return MythicalArtifactLevelRequirements.FREE_EXPLOITER;
		}

		public override ArtifactEffect GetCopy()
		{
			MythicalArtifactFreeExploiter mythicalArtifactFreeExploiter = new MythicalArtifactFreeExploiter();
			mythicalArtifactFreeExploiter.SetRank(base.GetRank());
			return mythicalArtifactFreeExploiter;
		}

		public override string GetNameEN()
		{
			return LM.GetFromEN("ARTIFACT_NAME_FREE_UPGRADE");
		}

		public override string GetName()
		{
			return MythicalArtifactFreeExploiter.GetNameStatic();
		}

		public static string GetNameStatic()
		{
			return LM.Get("ARTIFACT_NAME_FREE_UPGRADE");
		}

		public override string GetAmountString()
		{
			return StringExtension.Concat("+", GameMath.GetPercentString(this.GetAmount(), false));
		}

		public override double GetAmount()
		{
			return (double)this.chance;
		}

		public override double GetUpgradeCost(int rank)
		{
			return base.GetUpgradeCost(rank * 2);
		}

		public override float GetChanceWeight()
		{
			return 30f;
		}

		public override string GetStringSelf(int levelDiff)
		{
			return MythicalArtifactFreeExploiter.GetString(this.rank, levelDiff);
		}

		public static string GetString(int rank, int levelDiff)
		{
			float num = MythicalArtifactFreeExploiter.GetChance(rank);
			string s = string.Empty;
			if (rank < MythicalArtifactFreeExploiter.MAX_RANK)
			{
				float num2 = MythicalArtifactFreeExploiter.GetChance(rank + levelDiff) - num;
				if (num2 > 0f)
				{
					s = " (+" + GameMath.GetPercentString(num2, false) + ")";
				}
			}
			return string.Format(LM.Get("ARTIFACT_EFFECT_FREE_UPGRADE"), GameMath.GetPercentString(num, false) + AM.csart(s));
		}

		public override ArtifactEffectCategory GetCategorySelf()
		{
			return MythicalArtifactFreeExploiter.effectCategory;
		}

		public static ArtifactEffectCategory GetCategoryType()
		{
			return MythicalArtifactFreeExploiter.effectCategory;
		}

		public static ArtifactEffectType GetEffectType()
		{
			return ArtifactEffectType.FreeUpgrade;
		}

		public override ArtifactEffectType GetEffectTypeSelf()
		{
			return MythicalArtifactFreeExploiter.GetEffectType();
		}

		public override int GetLevel()
		{
			return ArtifactEffect.LEVEL_MYTHICAL;
		}

		public override int GetMaxRank()
		{
			return MythicalArtifactFreeExploiter.MAX_RANK;
		}

		public override void SetRank(int rank)
		{
			this.rank = GameMath.GetMinInt(MythicalArtifactFreeExploiter.MAX_RANK, rank);
			this.chance = MythicalArtifactFreeExploiter.GetChance(rank);
		}

		private static float GetChance(int rank)
		{
			return MythicalArtifactFreeExploiter.CHANCES[rank];
		}

		public override bool CanBeDisabled()
		{
			return false;
		}

		public float chance;

		private static ArtifactEffectCategory effectCategory = ArtifactEffectCategory.MYTH;

		private static float[] CHANCES = new float[]
		{
			0.21f,
			0.22f,
			0.23f,
			0.24f,
			0.25f,
			0.26f,
			0.27f,
			0.28f,
			0.29f,
			0.3f,
			0.31f,
			0.32f,
			0.33f,
			0.34f,
			0.35f,
			0.36f,
			0.37f,
			0.38f,
			0.39f,
			0.4f,
			0.41f,
			0.42f,
			0.43f,
			0.44f,
			0.45f,
			0.46f,
			0.47f,
			0.48f,
			0.49f,
			0.5f,
			0.51f,
			0.52f,
			0.53f,
			0.54f,
			0.55f,
			0.56f,
			0.57f,
			0.58f,
			0.59f,
			0.6f,
			0.62f,
			0.64f,
			0.66f,
			0.68f,
			0.7f,
			0.72f,
			0.74f,
			0.76f,
			0.78f,
			0.8f,
			0.82f,
			0.84f,
			0.86f,
			0.88f,
			0.9f,
			0.92f,
			0.94f,
			0.96f,
			0.98f,
			1f
		};

		public static int MAX_RANK = 59;
	}
}
